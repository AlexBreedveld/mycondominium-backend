stages:
  - build
  - release_nightly

variables:
  # Enable colored output from Cargo.
  CARGO_TERM_COLOR: always
  # Disable TLS certificate directory for Docker-in-Docker (if needed).
  DOCKER_HOST: tcp://docker:2375/
  # use for much faster builds
  DOCKER_DRIVER: overlay2
  # ensure cross knows it's running remotely
  CROSS_REMOTE: 1
  DOCKER_TLS_CERTDIR: ""

# This job uses a matrix to build for multiple targets.
build:
  stage: build
  tags:
    - dind
    - cloud-br9
  image: registry.git.al3xdev.com:443/alex/rust-cross/rust-cross:latest
  services:
    - docker:dind
  variables:
    # Enable colored output from Cargo.
    CARGO_TERM_COLOR: always
    # Disable TLS certificate directory for Docker-in-Docker (if needed).
    DOCKER_HOST: tcp://docker:2375/
    # use for much faster builds
    DOCKER_DRIVER: overlay2
    # ensure cross knows it's running remotely
    CROSS_REMOTE: 1
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - rustup target add ${TARGET} || true
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - cargo add pq-sys -F bundled
    - cargo add openssl-sys -F vendored
  script:
    - echo "$JOB_ID_VAR=$CI_JOB_ID" >> build.env
    - echo "Building for ${NAME} (${TARGET})..."
    - ${COMMAND} build --verbose --locked --release --target ${TARGET}
  artifacts:
    reports:
      dotenv: build.env
    # Artifacts: any binary output in the target/{target}/release folder.
    paths:
      - target/${TARGET}/release/
    expire_in: 1 week
  parallel:
    matrix:
      - NAME: "linux-x86_64-gnu"
        TARGET: "x86_64-unknown-linux-gnu"
        COMMAND: "cross"
        JOB_ID_VAR: "BUILD_JOB_ID_LINUX_AMD64_GNU"
      - NAME: "linux-x86_64-musl"
        TARGET: "x86_64-unknown-linux-musl"
        COMMAND: "cross"
        JOB_ID_VAR: "BUILD_JOB_ID_LINUX_AMD64_MUSL"
      #- NAME: "windows-x86_64-gnu"
      #  TARGET: "x86_64-pc-windows-gnu"
      #  COMMAND: "cross"
      #- NAME: "macos"
      #  TARGET: "x86_64-apple-darwin"
      #  COMMAND: "cross"

release_nightly:
  stage: release_nightly
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  variables:
    LINUX_AMD64_GLIB_BIN: "mycondominium-server-linux-gnu-amd64"
    LINUX_AMD64_MUSL_BIN: "mycondominium-server-linux-musl-amd64"
  needs:
    job: build
    artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == dev
  script:
    - echo "running release_nightly for $TAG"
  release:
    name: 'Nightly Build $CI_COMMIT_SHORT_SHA'
    description: '## MyCondominium Nightly Build $CI_COMMIT_SHORT_SHA<br />### Changelog:<br />$CI_COMMIT_MESSAGE'
    tag_name: 'nightly'
    ref: '$CI_COMMIT_SHA'
    assets:
      links:
        - name: '$LINUX_AMD64_GLIB_BIN'
          link_type: 'package'
          url: '${CI_PROJECT_URL}/-/jobs/${BUILD_JOB_ID_LINUX_AMD64_GNU}/artifacts/file/target/x86_64-unknown-linux-gnu/release/mycondominium-backend'
        - name: '$LINUX_AMD64_MUSL_BIN'
          link_type: 'package'
          url: '${CI_PROJECT_URL}/-/jobs/${BUILD_JOB_ID_LINUX_AMD64_MUSL}/artifacts/file/target/x86_64-unknown-linux-musl/release/mycondominium-backend'